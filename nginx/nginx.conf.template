events {}

http {
    resolver 127.0.0.11 valid=30s;  # Docker's internal DNS resolver

    server {
        listen 80;
        server_name $USER_WEBSITE;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        http2 on;
        server_name $USER_WEBSITE;

        ssl_certificate /keys/fullchain.pem;
        ssl_certificate_key /keys/privkey.pem;

        # Main application
        location / {
            set $frontend_upstream "webapp";
            proxy_pass http://$frontend_upstream:5173;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
        }

        location /opentdf/ {
            set $NGINX_OPENTDF_UPSTREAM "opentdf";
            rewrite ^/opentdf(/.*)?$ $1 break;  
            proxy_pass http://$NGINX_OPENTDF_UPSTREAM:8080;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";

            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                return 204;
            }

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
        }

        location /org/ {
            set $NGINX_ORG_UPSTREAM "org";
            proxy_pass http://$NGINX_ORG_UPSTREAM:8085;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
        }

        location /keycloak/ {
            set $NGINX_KEYCLOAK_UPSTREAM "keycloak";

            # Proxy to Keycloak
            proxy_pass http://$NGINX_KEYCLOAK_UPSTREAM:8888;

            # Add headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle upstream redirects to enforce /keycloak/ prefix
            proxy_redirect http://keycloak:8888/ /keycloak/;
            proxy_redirect http://keycloak:8888/auth/ /keycloak/auth/;

            # SSL Handling
            proxy_ssl_server_name on;
            proxy_ssl_verify off;  # Replace with proper CA trust in production

            # Retry logic and timeouts
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
        }

        location /matrix/ {
            set $SYNAPSE_KEYCLOAK_UPSTREAM "synapse";
            proxy_pass http://$SYNAPSE_KEYCLOAK_UPSTREAM:8008/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            client_max_body_size 50M;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Proxy to Caddy server on bluesky-vm
        location /bluesky/ {
            rewrite ^/bluesky(/.*)?$ $1 break;

            # Set the upstream to the Multipass VM
            proxy_pass http://bluesky-vm.local:80;

            # Pass headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Configure proxy timeouts
            proxy_connect_timeout 5s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;

            # Allow for proper CORS
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";

            if ($request_method = OPTIONS) {
                return 204;
            }
        }

    }
}
